from fastapi import APIRouter, Depends, UploadFile, File, BackgroundTasks
from sqlalchemy.orm import Session
from typing import Annotated
from core.config import Config
from core.database import get_db
from dependencies.auth_dependencies import get_current_user
from models.models import User
from models.schemas import (
    ConversationCreateRequest,
    ConversationCreateResponse,
    AddMessageRequest,
    AddMessageResponse,
    ConversationDetailResponse,
    ChangeTitleRequest,
)
from services.conversation_service import (
    list_conversations,
    get_conversation,
    create_conversation,
    delete_conversation,
    change_conversation_title,
)
from services.rag_service import get_response
from services.processors.pdf_processor import process_pdf
from uuid import UUID
import os

router = APIRouter(prefix="/conversation", tags=["Conversations"])


@router.get(
    "/list",
    response_model=list[ConversationCreateResponse],
    summary="List Conversations",
    description="Retrieve a list of all conversations for the authenticated user.",
    response_description="A list of conversations with their IDs, titles, and last updated timestamps.",
)
def list_conversations_route(
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversations = list_conversations(db, current_user)
    return [
        {
            "id": str(c.id),
            "title": c.title,
            "updated_at": c.updated_at,
            "created_at": c.created_at,
        }
        for c in conversations
    ]


@router.get(
    "/{conversation_id}",
    response_model=ConversationDetailResponse,
    summary="Get Conversation Details",
    description="Retrieve detailed information about a specific conversation.",
    response_description="Detailed information of the conversation including messages and documents.",
)
def get_conversation_route(
    conversation_id: str,
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversation_id = UUID(conversation_id)
    conversation = get_conversation(db, conversation_id, current_user)
    return conversation


@router.post(
    "/new",
    response_model=ConversationCreateResponse,
    summary="Create New Conversation",
    description="Create a new conversation with an autogenerated title based on the initial query.",
    response_description="Details of the newly created conversation.",
)
def chat_conversation_route(
    request: ConversationCreateRequest,
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversation = create_conversation(db, current_user, request.query)
    response = get_response(db, request.query, conversation.id)
    return {
        "id": str(conversation.id),
        "title": conversation.title,
        "created_at": conversation.created_at,
        "updated_at": conversation.updated_at,
        "response": response,
    }


@router.put(
    "/{conversation_id}/title",
    response_model=ConversationCreateResponse,
    summary="Change Conversation Title",
    description="Change the title of a specific conversation.",
    response_description="Details of the updated conversation.",
)
def change_conversation_title_route(
    conversation_id: str,
    request: ChangeTitleRequest,
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversation_id = UUID(conversation_id)
    conversation = change_conversation_title(db, conversation_id, request.new_title)
    return {
        "id": str(conversation.id),
        "title": conversation.title,
        "created_at": conversation.created_at,
        "updated_at": conversation.updated_at,
    }


@router.delete(
    "/{conversation_id}",
    summary="Delete Conversation",
    description="Delete a specific conversation and all its associated messages and documents.",
    response_description="Confirmation of conversation deletion.",
)
def delete_conversation_route(
    conversation_id: str,
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversation_id = UUID(conversation_id)
    delete_conversation(db, conversation_id)
    return {"message": "Conversation deleted successfully."}


@router.post(
    "/{conversation_id}/message",
    response_model=AddMessageResponse,
    summary="Add Message to Conversation",
    description="Add a message (user or assistant) to an existing conversation.",
    response_description="Details of the added message.",
)
def add_message_route(
    conversation_id: str,
    request: AddMessageRequest,
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    conversation_id = UUID(conversation_id)
    response = get_response(db, request.query, conversation_id)
    return {"response": response}


@router.post(
    "/{conversation_id}/upload",
    summary="Upload File to Conversation",
    description="Upload a file to be associated with the conversation.",
    response_description="Confirmation of file upload.",
)
def upload_file_route(
    background_tasks: BackgroundTasks,
    conversation_id: str,
    file: UploadFile = File(...),
    db: Session = Depends(get_db),
    current_user: Annotated[User, Depends(get_current_user)] = None,
):
    if not file.filename.endswith(".pdf"):
        return {"error": "Only PDF files are supported."}
    conversation_id = UUID(conversation_id)
    file_location = f"{Config.UPLOAD_FOLDER}/{str(conversation_id)}/{file.filename}"
    os.makedirs(os.path.dirname(file_location), exist_ok=True)
    with open(file_location, "wb") as f:
        f.write(file.file.read())

    background_tasks.add_task(
        process_pdf, db, conversation_id, file.filename, file_location
    )

    return {"message": "File uploaded successfully.", "status": "processing"}
